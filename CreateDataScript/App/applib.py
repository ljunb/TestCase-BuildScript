# -*- coding:utf-8 -*-

'''
---      Author: ljunb
--- Last update: 20150615
---     Purpose: to create the base data of app script
'''

import random
#基础数据模块，以下皆为list对象：
#       用户号码-USR_NBR
#       终端IP-USR_IP
#       APN类型-APN;
#       网络标识-NET_TYP
#	一级分类-URL_LVL1
#       二级分类-URL_LVL2
#	IP&PORT匹配字典-IP_PORT
#	在线服务器IP地址-DEST_IP
#	目的端口-DEST_PORT
#	已匹配规则库的URL-MATCH_URL

USR_NBR = ['41801567920', '45642891802', '47322318004', '47319103519', '41504185087', '41801832769', '54674749351', '40840497667', '47205190348', '41202014104', '41404015288', '41503461763', '41796319711', '47771849557', '55448323372', '47743148203', '41490359509', '41038626604', '40857808237', '45678812032', '41194096279', '47461037257', '41079862135', '45790905355', '47760518746', '40281531559', '41416192027', '54875999203', '40293694501', '47478327469', '41302969756', '45379374040', '41797871296', '41048175262', '40370476879', '55448428609', '40638835666', '41079722935', '41786181661', '47948192380', '40372542385', '41090859241', '40332123034', '40316627131', '47720447161', '40624376344', '41789400589', '40624783675', '40295428438', '47478231178', '45058479820', '47205851767', '40915816123', '41161284973', '40633937998', '45384271243', '40569938404', '40604737417', '41082492094', '41127904816', '47720694802', '41507613250', '41488338115', '41198349439', '40392575572', '41128985500', '41082362221', '47765248609', '41402449402', '47467521538', '40881305104', '41801895481', '45377573056', '40648986847', '40857795982', '56715944368', '47989499881', '40254318262', '47648884735', '41300436013', '56174451382', '40281487060', '45289983085', '41490553276', '41060616697', '55090978429', '56175195346', '40792945936', '41127277147', '47460509395', '40915555240', '40255150198', '40856999185', '47645685280', '45055178038', '56496359911', '47318835802']
#样例数据的IP
USR_IP = ['10.73.104.66', '10.91.144.182', '10.75.24.114', '10.152.172.70', '10.152.237.22', '10.79.76.82', '10.80.40.66', '10.112.157.130', '10.111.67.234', '10.79.156.42', '10.80.14.46', '10.80.194.146', '10.151.179.218', '10.151.255.30', '10.73.10.162', '10.80.124.162', '10.111.131.130', '10.151.47.130', '10.80.31.182', '10.33.23.98', '10.80.121.30', '10.75.176.230', '10.151.222.154', '10.79.235.42', '10.152.75.162', '10.111.139.210', '10.33.177.158', '10.80.1.170', '10.79.109.18', '10.79.165.118', '10.80.112.194', '10.33.135.150', '10.151.108.10', '10.152.9.150', '10.33.142.134', '10.112.42.218', '10.111.57.134', '10.80.116.234', '10.79.201.130', '10.111.39.198', '10.79.134.218', '10.80.121.186', '10.112.169.62', '10.79.107.26', '10.151.35.142', '10.75.95.242', '10.79.183.54', '10.111.166.50', '10.88.68.46', '10.151.113.170', '10.79.121.98', '10.80.83.114', '10.111.9.230', '10.80.114.178', '10.80.208.118', '10.80.122.242', '10.75.164.134', '10.152.207.254', '10.75.123.166', '10.112.48.254', '10.111.227.126', '10.80.124.178', '10.80.120.226', '10.79.124.90', '10.79.12.126', '10.112.137.254', '10.112.64.66', '10.80.115.114', '10.79.253.194', '10.79.110.142', '10.80.112.238', '10.112.30.26', '10.79.201.2', '10.112.128.174', '10.111.41.146', '10.80.51.30', '10.112.220.82', '10.80.119.94', '10.112.14.194', '10.80.120.138', '10.91.160.178', '10.80.63.2', '10.33.52.162', '10.91.111.178', '10.91.108.214', '10.88.80.30', '10.80.148.90', '10.80.140.230', '10.73.38.210', '10.92.124.110', '10.73.94.54', '10.75.184.186', '10.79.84.10', '10.79.224.214', '10.79.145.98', '10.92.124.74', '10.79.138.186']

APN = ['cmnet', 'cmwap']

NET_TYP = ['1', '2', '3', '4', '5', '6']

URL_LVL1 = ['IM', 'P2P']

URL_LVL2 = ['TCP', 'BT', '微信']

IP_PORT = {1: ['202.96.128.86', '53'], 2: ['202.96.134.133', '53'], 3: ['115.168.254.1', '53'], 4: ['115.168.254.2', '53'], 
5: ['114.54.23.28', '80'], 6: ['114.54.23.7', '80'], 7: ['114.54.23.31', '80'], 8: ['8.8.8.8', '53'], 
9: ['42.62.48.145', '80'], 10: ['117.34.40.111', '80'], 11: ['140.205.152.54', '80'], 12: ['110.75.70.29', '80'], 
13: ['140.205.152.149', '80'], 14: ['140.205.152.184', '80'], 15: ['101.226.10.8', '80'], 16: ['42.156.210.48', '80'], 
17: ['14.18.245.186', '80'], 18: ['14.17.52.137', '80'], 19: ['183.61.49.180', '80'], 20: ['101.226.129.190', '80'], 
21: ['61.151.186.123', '80'], 22: ['101.227.131.48', '80'], 23: ['183.61.46.199', '80'], 24: ['14.17.42.45', '80'], 
25: ['14.18.245.167', '80'], 26: ['183.60.15.188', '80'], 27: ['101.226.129.215', '80'], 28: ['101.227.169.159', '80'], 
29: ['61.151.224.41', '80'], 30: ['211.140.17.120', '8088']}

def getDEST_IP():
        #随机取得A/B/C其中一类IP地址
        randNum = random.randrange(0, 3)
        if randNum == 0:
            return '.'.join([str(random.randrange(1, 127)), str(random.randrange(0, 256)),str(random.randrange(0, 256)), str(random.randrange(0, 256))])
        elif randNum == 1:
            return '.'.join([str(random.randrange(128, 192)), str(random.randrange(1, 255)),str(random.randrange(0, 256)), str(random.randrange(0, 256))])
        else:
            return '.'.join([str(random.randrange(192, 223)), str(random.randrange(0, 256)),str(random.randrange(1, 255)), str(random.randrange(0, 256))])

def getDEST_Port():
        #端口号从1-8080
        return str(random.randrange(1, 8081))

#时间格式函数
def formatMethod(t_param):
        #时间参数小于10的，以‘0X’格式显示
        if t_param < 10:
            return '0' + str(t_param)
        else :
            return str(t_param)

#生成随机时间
def getRandTime():
        global stat_minute, end_minute, stat_secend, end_secend, durtime
        
 	#时间定为2015年1月至5月
        year = '2015'
        month = random.randrange(1, 6)
        if month == 2:
            date = random.randrange(1, 29)
        elif month == 4:
            date = random.randrange(1, 31)
        else :
            date = random.randrange(1, 32)
        #随机生成小时、分钟(最大58分)、秒(收到请求时间与结束时间相差最多19秒)
        durtime = random.randrange(0, 20)
        hour = random.randrange(0, 24)
        stat_minute = random.randrange(0, 59)
        end_minute = stat_minute
        stat_secend = random.randrange(0, 60)
        end_secend = stat_secend + durtime
        #如果秒大于60，则分钟+1
        if end_secend >= 60:
            end_minute = end_minute + 1
            end_secend = end_secend - 60
        
        #随机生成毫秒
        stat_msec = random.randrange(0, 1000)
        end_msec = random.randrange(stat_msec, 1000)
        #封装日期，开始/结束时间
        date = [year, formatMethod(month), formatMethod(date)]
        stat_time = [formatMethod(hour), formatMethod(stat_minute), formatMethod(stat_secend)]
        end_time = [formatMethod(hour), formatMethod(end_minute), formatMethod(end_secend)]

        #最终时间格式"YYYY-MM-DD hh:mm:ss.mmmm"
        STAT_TIME = '-'.join(date) + ' ' + ':'.join(stat_time) + '.' + str(stat_msec)
        END_TIME = '-'.join(date) + ' ' + ':'.join(end_time) + '.' + str(end_msec)
        return STAT_TIME, END_TIME
#返回访问时长
def getDurTime():
        return str(durtime)
